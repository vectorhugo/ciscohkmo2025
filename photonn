以下是一個針對 Kaggle 圖像分類比賽的具體範例，假設我們參與一個簡單的圖像分類任務（例如「貓狗分類」）。這個範例使用 PyTorch 框架，基於預訓練的 ResNet18 模型，展示從數據加載到提交預測的完整流程。代碼在 Kaggle 筆記本環境中可運行，並包含數據增強、訓練和生成提交文件的步驟。

範例：Kaggle 圖像分類比賽（貓狗分類）
假設數據結構：

訓練數據：train/ 文件夾，包含標記為 cat.*.jpg 和 dog.*.jpg 的圖像。
測試數據：test/ 文件夾，包含無標籤的圖像 1.jpg, 2.jpg, ...。
提交格式：CSV 文件，包含 id（圖像編號）和 label（預測概率，0 表示貓，1 表示狗）。
目標：訓練模型並生成測試集的預測提交文件。

完整代碼
python

複製
# 導入必要的庫
import os
import pandas as pd
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from torchvision import models, transforms
from PIL import Image
import albumentations as A
from albumentations.pytorch import ToTensorV2
from sklearn.model_selection import train_test_split
from tqdm import tqdm

# 設置隨機種子以確保可重現性
torch.manual_seed(42)
np.random.seed(42)

# 定義設備（GPU 或 CPU）
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 1. 定義數據集類
class CatDogDataset(Dataset):
    def __init__(self, img_paths, labels=None, transform=None):
        self.img_paths = img_paths
        self.labels = labels
        self.transform = transform

    def __len__(self):
        return len(self.img_paths)

    def __getitem__(self, idx):
        img_path = self.img_paths[idx]
        img = np.array(Image.open(img_path).convert("RGB"))
        
        if self.transform:
            img = self.transform(image=img)["image"]
        
        if self.labels is not None:
            label = self.labels[idx]
            return img, label
        return img, img_path

# 2. 數據預處理與增強
train_transform = A.Compose([
    A.Resize(224, 224),
    A.HorizontalFlip(p=0.5),
    A.RandomBrightnessContrast(p=0.2),
    A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ToTensorV2()
])

val_transform = A.Compose([
    A.Resize(224, 224),
    A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ToTensorV2()
])

# 3. 加載數據
data_dir = "/kaggle/input/your-competition-name"  # 替換為實際比賽數據路徑
train_dir = os.path.join(data_dir, "train")
test_dir = os.path.join(data_dir, "test")

# 獲取訓練數據路徑和標籤
train_images = [os.path.join(train_dir, f) for f in os.listdir(train_dir)]
train_labels = [1 if "dog" in f else 0 for f in train_images]

# 分割訓練集和驗證集
train_paths, val_paths, train_labels, val_labels = train_test_split(
    train_images, train_labels, test_size=0.2, random_state=42
)

# 創建數據集
train_dataset = CatDogDataset(train_paths, train_labels, transform=train_transform)
val_dataset = CatDogDataset(val_paths, val_labels, transform=val_transform)

# 創建數據加載器
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

# 4. 加載預訓練模型
model = models.resnet18(pretrained=True)
model.fc = nn.Linear(model.fc.in_features, 2)  # 修改最後一層以適應二分類
model = model.to(device)

# 5. 定義損失函數和優化器
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=1e-3)

# 6. 訓練模型
def train_model(num_epochs=10):
    best_acc = 0.0
    for epoch in range(num_epochs):
        # 訓練階段
        model.train()
        running_loss = 0.0
        for images, labels in tqdm(train_loader, desc=f"Epoch {epoch+1}"):
            images, labels = images.to(device), labels.to(device)
            
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            
            running_loss += loss.item()
        
        epoch_loss = running_loss / len(train_loader)
        
        # 驗證階段
        model.eval()
        correct = 0
        total = 0
        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()
        
        epoch_acc = 100 * correct / total
        print(f"Epoch {epoch+1}/{num_epochs}, Loss: {epoch_loss:.4f}, Val Acc: {epoch_acc:.2f}%")
        
        # 保存最佳模型
        if epoch_acc > best_acc:
            best_acc = epoch_acc
            torch.save(model.state_dict(), "best_model.pth")

# 執行訓練
train_model(num_epochs=10)

# 7. 測試集預測
test_images = [os.path.join(test_dir, f) for f in os.listdir(test_dir)]
test_dataset = CatDogDataset(test_images, transform=val_transform)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

model.load_state_dict(torch.load("best_model.pth"))
model.eval()

predictions = []
image_ids = []
with torch.no_grad():
    for images, paths in tqdm(test_loader, desc="Predicting"):
        images = images.to(device)
        outputs = model(images)
        probs = torch.softmax(outputs, dim=1)[:, 1].cpu().numpy()  # 獲取「狗」的概率
        predictions.extend(probs)
        image_ids.extend([os.path.basename(p).split('.')[0] for p in paths])

# 8. 生成提交文件
submission = pd.DataFrame({"id": image_ids, "label": predictions})
submission.to_csv("submission.csv", index=False)
print("Submission file created: submission.csv")
代碼說明
數據加載與預處理：
使用 albumentations 進行數據增強（訓練集包括翻轉和亮度調整，驗證集僅標準化）。
數據集類 CatDogDataset 負責加載圖像並應用轉換。
將訓練數據分割為 80% 訓練集和 20% 驗證集。
模型選擇：
使用預訓練的 ResNet18，修改最後全連接層以適應二分類（貓/狗）。
模型運行在 GPU 上（Kaggle 提供免費 GPU）。
訓練流程：
使用 Adam 優化器和交叉熵損失。
每個 epoch 計算訓練損失和驗證準確率，保存最佳模型。
使用 tqdm 顯示進度條，提升交互體驗。
測試與提交：
對測試集進行預測，輸出「狗」的概率（作為比賽要求的標籤）。
生成符合 Kaggle 格式的 submission.csv 文件，包含圖像 ID 和預測概率。
