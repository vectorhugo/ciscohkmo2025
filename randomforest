import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# 加载数据集（从 CSV 文件读取）
df = pd.read_csv('/kaggle/input/decisiontree/Decision Tree.csv')

# 删除重复的数据行
df = df.drop_duplicates()

# 提取特征（X）和目标变量（y）
X = df.drop('Drug', axis=1)  # 特征不包含目标列 'Drug'
y = df['Drug']               # 目标变量是 'Drug'

# 对類別型特徵進行編碼（將字符串轉換為整數）
categorical_cols = X.select_dtypes(include=['object']).columns  # 找出所有 object 類型的列
for col in categorical_cols:
    le = LabelEncoder()          # 建立標籤編碼器
    X[col] = le.fit_transform(X[col])  # 對每一個類別特徵進行數值轉換

# 將數據劃分為訓練集和測試集（80%訓練，20%測試）
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 建立隨機森林分類器
# n_estimators: 樹的數量設為100
# max_depth: 每棵樹的最大深度設為5，防止過擬合
# min_samples_leaf: 每個葉子節點至少有5個樣本才能保留
rf_clf = RandomForestClassifier(
    n_estimators=100, 
    max_depth=5, 
    min_samples_leaf=5, 
    random_state=42
)

# 對訓練集進行5折交叉驗證，檢查模型的穩定性和泛化能力
cv_scores = cross_val_score(rf_clf, X_train, y_train, cv=5)
print(f'交叉验证平均准确率: {cv_scores.mean()}')

# 在訓練集上訓練模型
rf_clf.fit(X_train, y_train)

# 使用訓練好的模型在測試集上進行預測
y_pred = rf_clf.predict(X_test)

# 計算準確率（正確預測所佔比例）
accuracy = accuracy_score(y_test, y_pred)

# 計算精確率（預測為某類的樣本中，有多少是真正屬於該類）
# 使用 weighted 平均，考慮類別不平衡
precision = precision_score(y_test, y_pred, average='weighted')

# 計算召回率（實際為某類的樣本中，有多少被正確預測）
recall = recall_score(y_test, y_pred, average='weighted')

# 計算 F1 分數（精確率與召回率的調和平均）
f1 = f1_score(y_test, y_pred, average='weighted')

# 輸出各項評估指標
print(f'模型准确率: {accuracy}')
print(f'模型精确率: {precision}')
print(f'模型召回率: {recall}')
print(f'模型 F1 分数: {f1}')

# 視覺化隨機森林中的第一棵樹（僅作為示意）
plt.figure(figsize=(20, 15))                     # 設定畫布大小
estimator = rf_clf.estimators_[0]                # 選擇隨機森林中的第一棵樹
plot_tree(
    estimator, 
    feature_names=X.columns,                     # 顯示特徵名稱
    class_names=rf_clf.classes_,                 # 顯示分類名稱
    filled=True,                                 # 節點顏色反映類別
    rounded=True                                 # 節點形狀為圓角矩形
)
plt.title('First Tree in Random Forest for Drug Classification')  # 圖標題
plt.savefig('random_forest_tree.png')           # 儲存圖片到檔案
plt.show()                                       # 顯示決策樹

# 補充說明（文字部分）
# 節點條件示例：Age <= 30，代表模型在該節點根據 Age 值進行分裂
# gini 值越接近 0，節點越純，即大多數樣本屬於同一類
# samples 表示該節點中的樣本總數
# value = [20, 30, 50] 表示樣本分佈在不同類別的數量
# class 表示該節點預測的最終類別
