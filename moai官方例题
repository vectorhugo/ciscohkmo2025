import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset, random_split
import pandas as pd
import numpy as np

# 讀取訓練圖像，添加通道維度並轉為浮點型
train_images = torch.load('train_images.pt').unsqueeze(1).float()  # [60000, 1, 28, 28]
test_images = torch.load('test_images.pt').unsqueeze(1).float()    # [10000, 1, 28, 28]

# 歸一化處理，將像素值從 0~255 壓縮到 0~1
train_images /= 255.0
test_images /= 255.0

# 讀取標籤 CSV，並轉為 long 類型的 tensor
labels_df = pd.read_csv('train_labels.csv')
train_labels = torch.tensor(labels_df['label'].values).long()

# 使用 TensorDataset 封裝圖像和標籤
dataset = TensorDataset(train_images, train_labels)

# 訓練集和驗證集按 8:2 比例劃分
train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_set, val_set = random_split(dataset, [train_size, val_size])

# 創建數據加載器，batch_size=64
train_loader = DataLoader(train_set, batch_size=64, shuffle=True)
val_loader = DataLoader(val_set, batch_size=64)

# 定義一個簡單的 CNN 模型
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)  # 卷積層1，輸出16個通道
        self.pool1 = nn.MaxPool2d(2, 2)                          # 池化層1，尺寸減半
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1) # 卷積層2，輸出32個通道
        self.pool2 = nn.MaxPool2d(2, 2)                          # 池化層2，尺寸再減半
        self.fc = nn.Linear(32 * 7 * 7, 10)                      # 全連接層，輸出10類

    def forward(self, x):
        x = torch.relu(self.conv1(x))  # 第一層卷積+ReLU
        x = self.pool1(x)              # 第一層池化
        x = torch.relu(self.conv2(x))  # 第二層卷積+ReLU
        x = self.pool2(x)              # 第二層池化
        x = x.view(-1, 32 * 7 * 7)     # 拉平為全連接層輸入
        x = self.fc(x)                 # 全連接層輸出
        return x

# 實例化模型
model = SimpleCNN()

# 定義損失函數為交叉熵損失
criterion = nn.CrossEntropyLoss()

# 使用 Adam 優化器，學習率設為 0.001
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 驗證集評估函數，返回平均損失與準確率
def evaluate(loader):
    model.eval()
    total_loss, correct, total = 0, 0, 0
    with torch.no_grad():  # 禁用梯度計算以節省資源
        for images, labels in loader:
            outputs = model(images)
            loss = criterion(outputs, labels)
            total_loss += loss.item() * labels.size(0)
            preds = outputs.argmax(1)
            correct += (preds == labels).sum().item()
            total += labels.size(0)
    return total_loss / total, correct / total

# 模型訓練過程，共訓練5輪（epoch）
for epoch in range(5):
    model.train()
    running_loss, correct, total = 0, 0, 0
    for images, labels in train_loader:
        optimizer.zero_grad()           # 清空梯度
        outputs = model(images)         # 前向傳播
        loss = criterion(outputs, labels)  # 計算損失
        loss.backward()                 # 反向傳播
        optimizer.step()                # 更新參數
        running_loss += loss.item() * labels.size(0)
        preds = outputs.argmax(1)       # 預測最大概率類別
        correct += (preds == labels).sum().item()
        total += labels.size(0)

    # 計算訓練損失與準確率
    train_loss = running_loss / total
    train_acc = correct / total

    # 驗證集上計算損失與準確率
    val_loss, val_acc = evaluate(val_loader)

    # 打印訓練與驗證結果
    print(f'Epoch {epoch+1}: Train Loss={train_loss:.4f}, Acc={train_acc:.4f} | Val Loss={val_loss:.4f}, Acc={val_acc:.4f}')

# 準確率對應得分的計算函數
def calculate_score(accuracy):
    x = accuracy * 100
    if x >= 90:
        return 50 - 2 * (100 - x)
    elif x >= 80:
        return 30 - (90 - x)
    elif x >= 50:
        return 20 * (x - 50) / 30
    else:
        return 0

# 對測試集進行預測
test_loader = DataLoader(test_images, batch_size=64)
model.eval()
all_preds = []

with torch.no_grad():  # 測試階段無需計算梯度
    for images in test_loader:
        outputs = model(images)
        preds = outputs.argmax(1)  # 取最大概率作為預測結果
        all_preds.append(preds)

# 合併所有預測結果為一個 tensor
final_predictions = torch.cat(all_preds)

# 建立提交的 DataFrame，包含 id 和 label 欄位
submission = pd.DataFrame({
    'id': list(range(len(final_predictions))),
    'label': final_predictions.numpy()
})

# 儲存為 submission.csv 文件
submission.to_csv('submission.csv', index=False)
print("submission.csv 已成功保存。")
